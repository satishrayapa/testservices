; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Lumen Services"
#define MyAppVersion "1.5"
#define MyAppPublisher "Thomson Reuters"
#define MyAppURL "http://www.tr.com/"
#define _F_AH "Facade.AssessmentHeader"
; PsSrcDir - source location of powershell file websites.ps1
#define PsSrcDir GetEnv('WORKSPACE') 
#if PsSrcDir == ""
 #define PsSrcDir "C:\projects-vs\AumentumTax\Modules\Services\Msi" 
#endif
; SrcDir - source location of published sites
#define SrcDir GetEnv('PUBLISHEDSITES') 
#if SrcDir == ""
 #define SrcDir "C:\t\publishsites" 
#endif
; MsiVer - string to use in naming of setup msi
#define MsiVer GetEnv('TFS_CS') 
#if MsiVer == ""
 #define MsiVer "DEV" 
#endif
; DestDir - destination location of published sites
#define DestDir d:\deployedsites
#if DestDir == ""
 #define DestDir "d:\deployedsites" 
#endif

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{8F1CF5ED-BF43-4556-A9BF-F16817A0EE1F}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName=LumenServices\{#MyAppName}
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
OutputBaseFilename=LumenSetup-{#MsiVer}
Compression=lzma
SolidCompression=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "{#PsSrcDir}\*.ps1"; Flags: dontcopy;
Source: "{#PsSrcDir}\installDB.ps1"; 
Source: "{#SrcDir}\Common.Security\*";          DestDir: "{#DestDir}\Common.Security";          Flags: ignoreversion recursesubdirs createallsubdirs; Components: C_S;
Source: "{#SrcDir}\Common.ResourceLocator\*";   DestDir: "{#DestDir}\Common.ResourceLocator";   Flags: ignoreversion recursesubdirs createallsubdirs; Components: C_RL;
Source: "{#SrcDir}\Facade.AssessmentHeader\*";  DestDir: "{#DestDir}\Facade.AssessmentHeader";  Flags: ignoreversion recursesubdirs createallsubdirs; Components: F_AH;
Source: "{#SrcDir}\Facade.BaseValueSegment\*";  DestDir: "{#DestDir}\Facade.BaseValueSegment";  Flags: ignoreversion recursesubdirs createallsubdirs; Components: F_BVS;
Source: "{#SrcDir}\Service.AssessmentEvent\*";  DestDir: "{#DestDir}\Service.AssessmentEvent";  Flags: ignoreversion recursesubdirs createallsubdirs; Components: S_AE;
Source: "{#SrcDir}\Service.BaseValueSegment\*"; DestDir: "{#DestDir}\Service.BaseValueSegment"; Flags: ignoreversion recursesubdirs createallsubdirs; Components: S_BVS;
Source: "{#SrcDir}\Service.LegalParty\*";       DestDir: "{#DestDir}\Service.LegalParty";       Flags: ignoreversion recursesubdirs createallsubdirs; Components: S_LP;
Source: "{#SrcDir}\Service.RevenueObject\*";    DestDir: "{#DestDir}\Service.RevenueObject";    Flags: ignoreversion recursesubdirs createallsubdirs; Components: S_RO;
Source: "{#SrcDir}\Service.GrmEvent\*";         DestDir: "{#DestDir}\Service.GrmEvent";         Flags: ignoreversion recursesubdirs createallsubdirs; Components: S_GE;

[Types]
Name: "full"; Description: "Full installation"
Name: "custom"; Description: "Custom installation"; Flags: iscustom

[Components]
Name: "C_S";   Description: "Common.Security";          Types: full custom 
Name: "C_RL";  Description: "Common.ResourceLocator";   Types: full custom 
Name: "F_AH";  Description: "Facade.AssessmentHeader";  Types: full custom
Name: "F_BVS"; Description: "Facade.BaseValueSegment";  Types: full custom
Name: "S_AE";  Description: "Service.AssessmentEvent";  Types: full custom 
Name: "S_BVS"; Description: "Service.BaseValueSegment"; Types: full custom 
Name: "S_LP";  Description: "Service.LegalParty";       Types: full custom 
Name: "S_RO";  Description: "Service.RevenueObject";    Types: full custom 
Name: "S_GE";  Description: "Service.GrmEvent";         Types: full custom 

[Code]
var
  UserPage: TInputQueryWizardPage;
  ResultCode: Integer;
  TempDir: String;
  AppPool: String;
  WebSite: String;
  LumenArgs: String;

{ Runs once before wizard is shown.  Add custom pages here }
procedure InitializeWizard;
begin
  UserPage := CreateInputQueryPage(wpWelcome,
    'IIS Information', '',
    'Please specify the Application Pool and the Website, then click Next.');
  UserPage.Add('Application Pool:', False);
  UserPage.Add('Website:', False);
  UserPage.Values[0] := 'LumenPool';
  UserPage.Values[1] := 'Default Web Site';

end;

{ runs once, after wizard is fully shown }
function InitializeSetup: Boolean;
begin
  Log('extracting temporary file');
  try
    ExtractTemporaryFile( 'websites.ps1' );    
  except
    ShowExceptionMessage();
  end;
  Result := true;
end;

{ runs after all wizard pages are completed and user clicks install }
function PrepareToInstall(var NeedsRestart: Boolean): String;
begin
  Log('PrepareToInstall() called');
  Log('ComponentsSelected: ' + WizardSelectedComponents(false));
  AppPool := UserPage.Values[0];
  WebSite := UserPage.Values[1];
  StringChangeEx(AppPool, ' ', ',', False);
  StringChangeEx(WebSite, ' ', ',', False);
  Log('AppPool: ' + AppPool);
  Log('WebSite: ' + WebSite);

  TempDir := ExpandConstant('{tmp}');
  LumenArgs := '-NonInteractive -NoProfile -Command "' + TempDir + '\websites.ps1"' + 
    ' -appPool "' + AppPool + '"' +
    ' -webSite "' + WebSite + '"' +
    ' -components "' + WizardSelectedComponents(false) + '"';
  Log('LumenArgs: ' + LumenArgs);
  if Exec('PowerShell', LumenArgs, '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
  begin
    Log('Exec return true with result: ' + IntToStr(ResultCode));
  end
  else begin
    Log('Exec return false with result: ' + IntToStr(ResultCode));
  end;
  Result := '';
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  Log('CurStepChanged(' + IntToStr(Ord(CurStep)) + ') called');
 
end;

[Run]
FileName: "{#PsSrcDir}\installDB.ps1";
